#!/usr/bin/env bash
set -e

# Load version from file
VERSION_FILE="$(dirname "$0")/VERSION"
if [[ -f "$VERSION_FILE" ]]; then
  VERSION=$(cat "$VERSION_FILE")
else
  VERSION="unknown"
fi

CONFIG_FILE="${HOME}/.gh-unpushed-config"

# Defaults
remote="origin"

# Read stored default remote if available
if [[ -f "$CONFIG_FILE" ]]; then
  stored_remote=$(cat "$CONFIG_FILE")
  if [[ -n "$stored_remote" ]]; then
    remote="$stored_remote"
  fi
fi

# Argument parsing
while [[ $# -gt 0 ]]; do
  case "$1" in
    --version|-v)
      echo "$VERSION"
      exit 0
      ;;
    --remote|-r)
      remote="$2"
      shift 2
      ;;
    --set-remote|-sr)
      if [[ -z "$2" ]]; then
        echo "ðŸš« Please provide a remote name."
        exit 1
      fi
      echo "$2" > "$CONFIG_FILE"
      echo "âœ… Default remote set to '$2'"
      exit 0
      ;;
    --help|-h)
      cat <<EOF
gh-unpushed - Show unpushed commits on your current Git branch

Usage:
  gh unpushed [remote] [options]

Description:
  Displays local commits that haven't been pushed to the specified remote.
  If no remote is specified, it uses the default (typically 'origin').

Examples:
  gh unpushed                  # Check unpushed commits to default remote
  gh unpushed upstream         # Use a specific remote
  gh unpushed -r upstream      # Same as above using --remote
  gh unpushed -sr upstream     # Set 'upstream' as new default
  gh unpushed -v               # Show tool version

Options:
  --remote, -r <remote>        Override the remote for this run
  --set-remote, -sr <remote>   Set a new default remote
  --version, -v                Show the version of this tool
  --help, -h                   Show this help message
EOF
      exit 0
      ;;
    -*)
      echo "ðŸš« Unknown option: $1"
      echo "Use --help to see available options."
      exit 1
      ;;
    *)
      # Assume it's a positional remote
      remote="$1"
      shift
      ;;
  esac
done

# Check current branch
branch=$(git branch --show-current)

if [[ -z "$branch" ]]; then
  echo "ðŸš« Not currently on a branch."
  exit 1
fi

if ! git rev-parse --verify "$remote/$branch" &> /dev/null; then
  cat <<EOF
ðŸš« Remote branch '$remote/$branch' doesn't exist!
ðŸ’¡ You may need to push this branch first:
    git push -u $remote $branch
EOF
  exit 1
fi

# Get unpushed commits
unpushed=$(git log "$remote/$branch"..HEAD \
  --pretty=format:"â€¢ %C(yellow)%h%Creset  %Cgreen%ad%Creset  %s" \
  --date=format:'%Y-%m-%d %H:%M:%S')

if [[ -z "$unpushed" ]]; then
  echo "âœ… No unpushed commits on '$branch' compared to '$remote'."
else
  cat <<EOF
ðŸš€ Unpushed commits on '$branch' (not yet pushed to '$remote/$branch'):

$unpushed

EOF
fi
