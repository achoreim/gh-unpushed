#!/usr/bin/env bash

#!/usr/bin/env bash
set -e

# Show unpushed commits for the current Git branch
# Optional: accepts a remote name (defaults to 'origin')

if [[ "$1" == "--help" || "$1" == "-h" ]]; then
  echo "Usage: gh unpushed [remote]"
  echo "Shows unpushed commits for the current branch compared to the specified remote (default: origin)."
  exit 0
fi

remote=${1:-origin}
branch=$(git branch --show-current)

if [[ -z "$branch" ]]; then
  echo "ðŸš« Not currently on a branch."
  exit 1
fi

# Check if the remote branch exists
if ! git rev-parse --verify "$remote/$branch" &> /dev/null; then
  echo "ðŸš« Remote branch '$remote/$branch' doesn't exist!"
  exit 1
fi

# Get unpushed commits
unpushed=$(git log "$remote/$branch"..HEAD --oneline)

if [[ -z "$unpushed" ]]; then
  echo "âœ… No unpushed commits on '$branch' compared to '$remote'."
else
  echo "ðŸš€ Unpushed commits on '$branch' (not yet pushed to '$remote/$branch'):"
  echo "$unpushed"
fi


# Snippets to help get started:

# Determine if an executable is in the PATH
# if ! type -p ruby >/dev/null; then
#   echo "Ruby not found on the system" >&2
#   exit 1
# fi

# Pass arguments through to another command
# gh issue list "$@" -R cli/cli

# Using the gh api command to retrieve and format information
# QUERY='
#   query($endCursor: String) {
#     viewer {
#       repositories(first: 100, after: $endCursor) {
#         nodes {
#           nameWithOwner
#           stargazerCount
#         }
#       }
#     }
#   }
# '
# TEMPLATE='
#   {{- range $repo := .data.viewer.repositories.nodes -}}
#     {{- printf "name: %s - stargazers: %v\n" $repo.nameWithOwner $repo.stargazerCount -}}
#   {{- end -}}
# '
# exec gh api graphql -f query="${QUERY}" --paginate --template="${TEMPLATE}"
